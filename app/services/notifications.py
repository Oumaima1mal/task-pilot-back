# Version s√©curis√©e pour les notifications WebSocket
import asyncio
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from app.models.notification import Notification
from app.schemas.notification import NotificationOut
from app.websocket.manager import ws_manager
from app.database.db import SessionLocal
import logging

logger = logging.getLogger(__name__)

WINDOWS = (
    (timedelta(hours=24),  "24h"),
    (timedelta(hours=3),   "3h"),
    (timedelta(hours=1),   "1h"),
)

def decide_and_create(db: Session, tache) -> None:
    """
    Version s√©curis√©e avec gestion d'erreurs WebSocket
    """
    try:
        now = datetime.utcnow()
        delta = tache.date_echeance - now
        
        print(f"Traitement de la t√¢che: {tache.titre} (ID: {tache.id})")
        
        # V√©rifier si la t√¢che est en retard
        if delta < timedelta():
            print(f"T√¢che en retard d√©tect√©e: {tache.titre}")
            _create_notification_for_overdue_safe(db, tache)
            return
        
        # V√©rifier si la t√¢che approche de son √©ch√©ance
        for limit, label in WINDOWS:
            if timedelta() < delta <= limit:
                print(f"T√¢che approchant de l'√©ch√©ance: {tache.titre} ({label})")
                _create_if_not_exists_safe(db, tache, label)
                break
                
    except Exception as e:
        logger.error(f"Erreur dans decide_and_create: {str(e)}")

def _create_if_not_exists_safe(db: Session, tache, label: str):
    """
    Version s√©curis√©e pour les t√¢ches approchant de l'√©ch√©ance
    """
    try:
        # Cr√©er notification WebSocket
        content_ws = f"‚è∞ ¬´{tache.titre}¬ª arrive ({label} avant √©ch√©ance)"
        
        # V√©rifier si notification WebSocket existe d√©j√†
        exists_ws = db.query(Notification).filter_by(
            tache_id=tache.id,
            contenu=content_ws,
            type_notification="websocket"
        ).first()
        
        if not exists_ws:
            notif_ws = Notification(
                contenu=content_ws,
                type_notification="websocket",
                utilisateur_id=tache.utilisateur_id,
                tache_id=tache.id,
                est_lue=False,
                date_envoi=datetime.utcnow()
            )
            db.add(notif_ws)
            db.commit()
            db.refresh(notif_ws)
            print(f"Notification WebSocket cr√©√©e: {notif_ws.id}")
            
            # Push WebSocket de mani√®re s√©curis√©e
            _safe_websocket_push(notif_ws)

        # Cr√©er notification Email pour t√¢ches prioritaires
        if tache.priorite in ("Urgent", "Important"):
            _create_email_notification_safe(tache, f"‚ö†Ô∏è Rappel important: ¬´{tache.titre}¬ª arrive ({label} avant √©ch√©ance)")
            
    except Exception as e:
        logger.error(f"Erreur dans _create_if_not_exists_safe: {str(e)}")

def _create_notification_for_overdue_safe(db: Session, tache):
    """
    Version s√©curis√©e pour les t√¢ches en retard
    """
    try:
        # Cr√©er notification WebSocket
        content_ws = f"‚ö†Ô∏è ¬´{tache.titre}¬ª est en retard !"
        
        # V√©rifier si notification WebSocket existe d√©j√†
        exists_ws = db.query(Notification).filter_by(
            tache_id=tache.id,
            contenu=content_ws,
            type_notification="websocket"
        ).first()
        
        if not exists_ws:
            notif_ws = Notification(
                contenu=content_ws,
                type_notification="websocket",
                utilisateur_id=tache.utilisateur_id,
                tache_id=tache.id,
                est_lue=False,
                date_envoi=datetime.utcnow()
            )
            db.add(notif_ws)
            db.commit()
            db.refresh(notif_ws)
            print(f"Notification WebSocket cr√©√©e pour t√¢che en retard: {notif_ws.id}")
            
            # Push WebSocket de mani√®re s√©curis√©e
            _safe_websocket_push(notif_ws)

        # Cr√©er notification email pour les t√¢ches en retard
        print(f"Cr√©ation d'une notification email pour t√¢che en retard: {tache.titre}")
        _create_email_notification_safe(tache, f"üö® ALERTE: ¬´{tache.titre}¬ª est en retard !")
        
    except Exception as e:
        logger.error(f"Erreur dans _create_notification_for_overdue_safe: {str(e)}")

def _safe_websocket_push(notification):
    """
    Fonction s√©curis√©e pour envoyer des notifications WebSocket
    """
    try:
        # V√©rifier si l'utilisateur est connect√©
        if ws_manager.is_connected(notification.utilisateur_id):
            # Cr√©er la t√¢che asyncio de mani√®re s√©curis√©e
            try:
                loop = asyncio.get_event_loop()
                if loop.is_running():
                    # Si on est dans un contexte asyncio, cr√©er la t√¢che
                    asyncio.create_task(
                        ws_manager.push(
                            notification.utilisateur_id, 
                            NotificationOut.from_orm(notification).dict()
                        )
                    )
                else:
                    # Si pas de loop actif, ignorer silencieusement
                    logger.debug(f"Pas de loop asyncio actif pour l'envoi WebSocket √† l'utilisateur {notification.utilisateur_id}")
            except RuntimeError:
                # Pas de loop asyncio disponible, ignorer silencieusement
                logger.debug(f"Pas de loop asyncio disponible pour l'envoi WebSocket √† l'utilisateur {notification.utilisateur_id}")
        else:
            logger.debug(f"Utilisateur {notification.utilisateur_id} non connect√© via WebSocket")
            
    except Exception as e:
        # Ne pas faire √©chouer le processus principal si WebSocket √©choue
        logger.warning(f"Erreur lors de l'envoi WebSocket (ignor√©e): {str(e)}")

def _create_email_notification_safe(tache, content: str):
    """
    Version s√©curis√©e pour cr√©er et envoyer une notification email
    """
    email_db = SessionLocal()
    try:
        print(f"Cr√©ation d'une notification email: {content}")
        
        # V√©rifier si une notification email similaire existe d√©j√† AUJOURD'HUI
        today = datetime.utcnow().date()
        today_start = datetime(today.year, today.month, today.day)
        
        exists = email_db.query(Notification).filter(
            Notification.tache_id == tache.id,
            Notification.type_notification == "email",
            Notification.date_envoi >= today_start,
            Notification.contenu.like(f"%{tache.titre}%")
        ).first()
        
        if exists:
            print(f"Notification email d√©j√† envoy√©e aujourd'hui pour la t√¢che {tache.id}")
            return False
        
        # Cr√©er la notification email
        email_notif = Notification(
            contenu=content,
            type_notification="email",
            utilisateur_id=tache.utilisateur_id,
            tache_id=tache.id,
            est_lue=False,
            date_envoi=datetime.utcnow()
        )
        email_db.add(email_notif)
        email_db.commit()
        email_db.refresh(email_notif)
        
        print(f"Notification Email cr√©√©e avec l'ID: {email_notif.id}")
        
        # Envoyer l'email imm√©diatement
        from app.services.email_service import send_notification_email
        print(f"Tentative d'envoi d'email pour la notification {email_notif.id}")
        
        success = send_notification_email(email_db, email_notif.id)
        
        if success:
            print(f"‚úÖ Email envoy√© avec succ√®s pour la notification {email_notif.id}")
            # Marquer comme envoy√©
            email_notif.est_lue = True
            email_notif.date_lecture = datetime.utcnow()
            email_db.commit()
            return True
        else:
            print(f"‚ùå √âchec de l'envoi d'email pour la notification {email_notif.id}")
            return False
            
    except Exception as e:
        logger.error(f"Erreur lors de la cr√©ation/envoi de notification email: {str(e)}")
        email_db.rollback()
        return False
    finally:
        email_db.close()